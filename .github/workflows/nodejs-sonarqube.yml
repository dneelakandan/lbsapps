name: Node.js CI/CD

on:
  push:
    branches:
       - main
  workflow_dispatch:

concurrency:
  group: aks-deploy
  cancel-in-progress: true

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [appointment-service, patient-service]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Login to ACR
      run: az acr login --name ${{ secrets.ACR_NAME }}

    
    - name: Install dependencies and run SonarQube scan
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        cd services/${{ matrix.service }}
        npm install
        npx sonar-scanner \
          -Dsonar.projectKey=${{ matrix.service }} \
          -Dsonar.sources=. \
          -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
          -Dsonar.login=$SONAR_TOKEN
    - name: Build and push Docker image
      run: |
        docker build -t ${{ secrets.ACR_NAME }}.azurecr.io/${{ matrix.service }}:latest ./services/${{ matrix.service }}
        docker push ${{ secrets.ACR_NAME }}.azurecr.io/${{ matrix.service }}:latest
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set AKS context
      run: az aks get-credentials --resource-group ${{ secrets.AKS_RESOURCE_GRP }} --name ${{ secrets.AKS_CLUSTER }}
    
    - name: Enable AKS API server public access
      run: az aks update --resource-group ${{ secrets.AKS_RESOURCE_GRP }} --name ${{ secrets.AKS_CLUSTER }}  \
             --api-server-authorized-ip-ranges 0.0.0.0/0

    
    - name: Install Helm
      run: |
        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

    
    - name: Deploy appointment-service with Helm
      run: |
        helm upgrade --install appointment-service ./helm/appointment-service \
          --set image.repository=${{ secrets.ACR_NAME }}.azurecr.io/appointment-service \
          --set image.tag=latest

    - name: Deploy patient-service with Helm
      run: |
        helm upgrade --install patient-service ./helm/patient-service \
          --set image.repository=${{ secrets.ACR_NAME }}.azurecr.io/patient-service \
          --set image.tag=latest

    
    - name: Revoke AKS API server public access
      run: az aks update --resource-group ${{ secrets.AKS_RESOURCE_GRP }} --name ${{ secrets.AKS_CLUSTER }}  \
             --api-server-authorized-ip-ranges ""

    
    #- name: Deploy using Azure CLI deploy appoinment deployment
    #  run: az aks command invoke --resource-group ${{ secrets.AKS_RESOURCE_GRP }} --name ${{ secrets.AKS_CLUSTER }} \
    #         --command "kubectl apply -f -" \
    #         --file  k8s/appointment-deployment.yml
              

    #- name: Deploy using Azure CLI deploy appoiment service
    #  run: az aks command invoke --resource-group ${{ secrets.AKS_RESOURCE_GRP }} --name ${{ secrets.AKS_CLUSTER }} \
    #         --command "kubectl apply -f -" \
    #         --file  k8s/appointment-service.yml

    #- name: Deploy using Azure CLI deploy patient deployment
    #  run: az aks command invoke --resource-group ${{ secrets.AKS_RESOURCE_GRP }} --name ${{ secrets.AKS_CLUSTER }} \
    #          --command "kubectl apply -f -" \
    #          --file  k8s/patient-deployment.yml


    #- name: Deploy using Azure CLI deploy patient service
    #  run: az aks command invoke --resource-group ${{ secrets.AKS_RESOURCE_GRP }} --name ${{ secrets.AKS_CLUSTER }} \
    #          --command "kubectl apply -f -" \              --file  k8s/patient-service.yml

    #- name: Deploy using Azure CLI deploy Ingress
    #  run: az aks command invoke --resource-group ${{ secrets.AKS_RESOURCE_GRP }} --name ${{ secrets.AKS_CLUSTER }} \
    #          --command "kubectl apply -f -" \
    #          --file  k8s/ingress.yml
    
   
