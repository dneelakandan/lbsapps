name: Node.js CI/CD

on:
  push:
    branches:
       - main
  workflow_dispatch:

concurrency:
  group: aks-deploy
  cancel-in-progress: true

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [appointment-service, patient-service]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Login to ACR
      run: az acr login --name ${{ secrets.ACR_NAME }}

    
    - name: Install dependencies and run SonarQube scan
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        cd services/${{ matrix.service }}
        npm install
        npx sonar-scanner \
          -Dsonar.projectKey=${{ matrix.service }} \
          -Dsonar.sources=. \
          -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
          -Dsonar.login=$SONAR_TOKEN
    - name: Build and push Docker image
      run: |
        docker build -t ${{ secrets.ACR_NAME }}.azurecr.io/${{ matrix.service }}:latest ./services/${{ matrix.service }}
        docker push ${{ secrets.ACR_NAME }}.azurecr.io/${{ matrix.service }}:latest
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set AKS context
      run: az aks get-credentials --resource-group ${{ secrets.AKS_RESOURCE_GRP }} --name ${{ secrets.AKS_CLUSTER }}
    
    #- name: Create name space
    #  run: kubectl create namespace healthcare
    
    #- name: Enable AKS API server public access
    #  run: |
    #    az aks update \
    #      --name ${{ secrets.AKS_CLUSTER }} \
    #      --resource-group ${{ secrets.AKS_RESOURCE_GRP }} \
    #      --api-server-authorized-ip-ranges 0.0.0.0/0


    
    - name: Install Helm
      run: |
        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
    
    - name: Clean up existing namespace with retry logic
      run: |
        # Function to delete namespace with retries
        delete_namespace() {
          local namespace=$1
          local max_retries=3
          local retry_count=0
          while [ $retry_count -lt $max_retries ]; do
            if kubectl get namespace "$namespace" >/dev/null 2>&1; then
              echo "Namespace $namespace exists, attempting to delete (attempt $((retry_count + 1))/$max_retries)..."
              kubectl delete namespace "$namespace" --ignore-not-found=true
              # Wait for deletion with timeout
              if kubectl wait --for=delete namespace/"$namespace" --timeout=60s 2>/dev/null; then
                 echo "Namespace $namespace successfully deleted"
                 return 0
              else
                echo "Namespace deletion still in progress, waiting..."
                sleep 10
              fi

            else
              echo "Namespace $namespace does not exist"
              return 0
            fi
            retry_count=$((retry_count + 1))
            done

            echo "Warning: Could not fully delete namespace $namespace after $max_retries attempts"

            return 1

          }

          # Delete the namespace

          delete_namespace "healthcare" || true

          # Additional wait to ensure namespace is gone

          echo "Waiting for namespace cleanup to complete..."

          sleep 15
 
      - name: Create namespace with Helm labels

        run: |

          # Create namespace with proper Helm labels and annotations

          cat <<EOF | kubectl apply -f -

          apiVersion: v1

          kind: Namespace

          metadata:

            name: healthcare-ns

            labels:

              app.kubernetes.io/managed-by: Helm

            annotations:

              meta.helm.sh/release-name: healthcare

              meta.helm.sh/release-namespace: healthcare

          EOF
 
      - name: Create ACR pull secret

        run: |

          kubectl create secret docker-registry acr-secret \

            --namespace healthcare-ns \

            --docker-server=${{ secrets.ACR_NAME }} \

            --docker-username=${{ secrets.AZURE_CLIENT_ID }} \

            --docker-password=${{ secrets.AZURE_CLIENT_SECRET }} \

            --dry-run=client -o yaml | kubectl apply -f -
 
      - name: Deploy to AKS using Helm

        run: |

          cd kubernetes/helm

          # Use --create-namespace but it should work now since we pre-created it with proper labels

          helm upgrade --install healthcare-ns . \

            --namespace healthcare-ns \

            --create-namespace \   

            --wait \

            --timeout 10m \

            --set global.environment=dev \

            --set image.registry=${{ secrets.ACR_NAME }} \

            --set patientService.image=patient-service \

            --set patientService.tag=${{ github.sha }} \  

            --set appointmentService.image=appointment-service \

            --set appointmentService.tag=${{ github.sha }} \

            --values values-dev.yaml

 
    
   

    
    
